## r notes - part 2
## sudhir.wadhwa@gmail.com
## July 4th , 2014
## USA




Loop functions


########## Goal 1 : understand lappy function ##################



lapply - input may or may not be a list
but output will always be a list

lapply - loop through each element in the list and apply the given function.
Following example loop through the lists and apply max and min fucntions.

> x <- list(a =1:4, b=5:10, c= 11:15)
> lapply(x, max)
$a
[1] 4

$b
[1] 10

$c
[1] 15

> lapply(x, min)
$a
[1] 1

$b
[1] 5

$c
[1] 11


> x <- list(a =1:4, b=5:10, c= 11:15)
> lapply(x, mean)
$a
[1] 2.5

$b
[1] 7.5

$c
[1] 13



Note: Anonymous functions have no name , you generate them
you name them and use them

lets have a matrix 2 by 2 ( that means 2 rows and 2 columns) and another matrix of 3 by 2 ( 3 rows and 2 columns)


> x <- list (a = matrix(1:4,2,2), b= matrix(11:16,3,2))
> x
$a
     [,1] [,2]
[1,]    1    3
[2,]    2    4

$b
     [,1] [,2]
[1,]   11   14
[2,]   12   15
[3,]   13   16

> 
> 
> 

lets get 2nd column of each element using lapply.
so second column is replresented as [,2]
row missing and give me just the second column


> lapply(x, function(el) el[,2])
$a
[1] 3 4

$b
[1] 14 15 16


lets get 1st column of each element using lapply.
> lapply(x, function(el) el[,1])
$a
[1] 1 2

$b
[1] 11 12 13


lets get 1st row of each element using lapply.
> lapply(x, function(el) el[1,])
$a
[1] 1 3

$b
[1] 11 14


so function "el" is anonymous function


lapply retuns a list

sapply will simplify


apply function: evaluate a function over the margins of array

apply = less typing , command line, 


Goal: Understadning lapply function

lets create a matrix of 4 by 5 ( that means 4 rows and 5 columns)

> m <- matrix(1:20, 4,5)
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20




We want to apply a function - apply to get sum and mean

> apply(m, 1, sum)
[1] 45 50 55 60

command says apply to matrix m , keep dimension 1 ( rows) , 4 rows , and sum across rows
forget about column
that means 1+5+9+13+17 = 45 , 2+6+10+14+18 = 50 , 3+7+11+15+19 = 55 and 4+8+12+16+20 = 60

Next command

> apply(m, 2, sum)
[1] 10 26 42 58 74

command says , keep dimension 2 , that means column , apply sum function to each column ( 5 columns are there)
forget about rows,
that means 1+2+3+4 = 10 , 5+6+7+8 = 26, 9+10+11=12 = 42 , 13+14+15+16 = 58 and 17+18+19+20 = 74


 rowSums, rowMeans , coluSums and colMeans are built in fucntions

##########################



tapply


> x <- c (1:10,11:20,21:30)
> f <- gl(3,10)
> f
 [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3
Levels: 1 2 3
> tapply(x, f, max)
 1  2  3 
10 20 30 
> tapply(x, f, min)
 1  2  3 
 1 11 21 
> tapply(x, f, mean)
   1    2    3 
 5.5 15.5 25.5 
> 


## tapply - weight of Male and Female , find means of males and females


> masterWT <- read.csv(file="/Users/sudhirwadhwa/Desktop/wt.csv", head=TRUE,sep=",")
> masterWT
   Sex weight
1    M    290
2    M    234
3    M    230
4    M    200
5    M    190
6    F    290
7    F    220
8    F    200
9    F    200
10   F    145
> f1
 [1] 1 1 1 1 1 2 2 2 2 2
Levels: 1 2
> tapply(masterWT$weight, f1, mean)
    1     2 
228.8 211.0 





##########################
 Beauty if split


> lapply (x, function(p) colMeans(p [, c("Ozone", "Solar.R", "Wind")]))
$`5`
   Ozone  Solar.R     Wind 
      NA       NA 11.62258 

$`6`
    Ozone   Solar.R      Wind 
       NA 190.16667  10.26667 

$`7`
     Ozone    Solar.R       Wind 
        NA 216.483871   8.941935 

$`8`
   Ozone  Solar.R     Wind 
      NA       NA 8.793548 

$`9`
   Ozone  Solar.R     Wind 
      NA 167.4333  10.1800 




> sapply (x, function(p) colMeans(p [, c("Ozone", "Solar.R", "Wind")]))
               5         6          7        8        9
Ozone         NA        NA         NA       NA       NA
Solar.R       NA 190.16667 216.483871       NA 167.4333
Wind    11.62258  10.26667   8.941935 8.793548  10.1800
> sapply (x, function(p) colMeans(p [, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
                5         6          7          8         9
Ozone    23.61538  29.44444  59.115385  59.961538  31.44828
Solar.R 181.29630 190.16667 216.483871 171.857143 167.43333
Wind     11.62258  10.26667   8.941935   8.793548  10.18000


##########################













 Write a function which will perform any given function




> run.this <- function(x,genFunction) { do.call (genFunction, args= list(x))}
> run.this(1:10, sum)
[1] 55
> run.this(1:10, max)
[1] 10
> run.this(1:10, min)
[1] 1
> run.this(1:10, sd)
[1] 3.02765
> run.this(1:20, sum)
[1] 210



